package top.potmot.model.enums

const val mysqlResult = """
[(ddl/all-tables.sql, DROP TABLE IF EXISTS `ENUM_TABLE`;

CREATE TABLE `ENUM_TABLE` (
    `ENUM_COMMON` VARCHAR(500) DEFAULT NULL,
    `ENUM_ORDINAL` BIGINT NOT NULL,
    `ENUM_NAME` VARCHAR(500) NOT NULL
)
  ENGINE = InnoDB
  CHARACTER SET = utf8mb4
  COMMENT = ''
  ROW_FORMAT = Dynamic;

), (ddl/enum_table.sql, DROP TABLE IF EXISTS `ENUM_TABLE`;

CREATE TABLE `ENUM_TABLE` (
    `ENUM_COMMON` VARCHAR(500) DEFAULT NULL,
    `ENUM_ORDINAL` BIGINT NOT NULL,
    `ENUM_NAME` VARCHAR(500) NOT NULL
)
  ENGINE = InnoDB
  CHARACTER SET = utf8mb4
  COMMENT = ''
  ROW_FORMAT = Dynamic;

)]
"""

const val postgresResult = """
[(ddl/all-tables.sql, DROP TABLE IF EXISTS "ENUM_TABLE" CASCADE;

CREATE TABLE "ENUM_TABLE" (
    "ENUM_COMMON" TEXT DEFAULT NULL,
    "ENUM_ORDINAL" BIGINT NOT NULL,
    "ENUM_NAME" TEXT NOT NULL
);

), (ddl/enum_table.sql, DROP TABLE IF EXISTS "ENUM_TABLE" CASCADE;

CREATE TABLE "ENUM_TABLE" (
    "ENUM_COMMON" TEXT DEFAULT NULL,
    "ENUM_ORDINAL" BIGINT NOT NULL,
    "ENUM_NAME" TEXT NOT NULL
);

)]
"""

const val h2Result = """
[(ddl/all-tables.sql, DROP TABLE IF EXISTS `ENUM_TABLE` CASCADE;

CREATE TABLE `ENUM_TABLE` (
    `ENUM_COMMON` CHARACTER VARYING(500) DEFAULT NULL,
    `ENUM_ORDINAL` BIGINT NOT NULL,
    `ENUM_NAME` CHARACTER VARYING(500) NOT NULL
);

), (ddl/enum_table.sql, DROP TABLE IF EXISTS `ENUM_TABLE` CASCADE;

CREATE TABLE `ENUM_TABLE` (
    `ENUM_COMMON` CHARACTER VARYING(500) DEFAULT NULL,
    `ENUM_ORDINAL` BIGINT NOT NULL,
    `ENUM_NAME` CHARACTER VARYING(500) NOT NULL
);

)]
"""
