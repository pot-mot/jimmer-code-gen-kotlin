package top.potmot.model.associations.real.oneToMany

const val mysqlResult = """
[(all-tables.sql, DROP TABLE IF EXISTS `O_M_TARGET`;
DROP TABLE IF EXISTS `O_M_SOURCE`;

CREATE TABLE `O_M_TARGET` (
    `ID` BIGINT NOT NULL AUTO_INCREMENT,
    `SOURCE_ID` BIGINT NOT NULL,
    PRIMARY KEY (`ID`)
)
  ENGINE = InnoDB
  CHARACTER SET = utf8mb4
  COMMENT = ''
  ROW_FORMAT = Dynamic;

CREATE TABLE `O_M_SOURCE` (
    `ID` BIGINT NOT NULL AUTO_INCREMENT,
    PRIMARY KEY (`ID`)
)
  ENGINE = InnoDB
  CHARACTER SET = utf8mb4
  COMMENT = ''
  ROW_FORMAT = Dynamic;

ALTER TABLE `O_M_TARGET`
    ADD CONSTRAINT `FK_ONE_TO_MANY`
        FOREIGN KEY (`SOURCE_ID`)
            REFERENCES `O_M_SOURCE` (`ID`);

), (o_m_source.sql, DROP TABLE IF EXISTS `O_M_SOURCE`;

CREATE TABLE `O_M_SOURCE` (
    `ID` BIGINT NOT NULL AUTO_INCREMENT,
    PRIMARY KEY (`ID`)
)
  ENGINE = InnoDB
  CHARACTER SET = utf8mb4
  COMMENT = ''
  ROW_FORMAT = Dynamic;

ALTER TABLE `O_M_TARGET`
    ADD CONSTRAINT `FK_ONE_TO_MANY`
        FOREIGN KEY (`SOURCE_ID`)
            REFERENCES `O_M_SOURCE` (`ID`);

), (o_m_target.sql, DROP TABLE IF EXISTS `O_M_TARGET`;

CREATE TABLE `O_M_TARGET` (
    `ID` BIGINT NOT NULL AUTO_INCREMENT,
    `SOURCE_ID` BIGINT NOT NULL,
    PRIMARY KEY (`ID`)
)
  ENGINE = InnoDB
  CHARACTER SET = utf8mb4
  COMMENT = ''
  ROW_FORMAT = Dynamic;

)]
"""

const val postgresResult = """
[(all-tables.sql, DROP TABLE IF EXISTS "O_M_TARGET" CASCADE;
DROP TABLE IF EXISTS "O_M_SOURCE" CASCADE;

CREATE TABLE "O_M_TARGET" (
    "ID" BIGSERIAL NOT NULL,
    "SOURCE_ID" BIGINT NOT NULL,
    PRIMARY KEY ("ID")
);

CREATE TABLE "O_M_SOURCE" (
    "ID" BIGSERIAL NOT NULL,
    PRIMARY KEY ("ID")
);

ALTER TABLE "O_M_TARGET"
    ADD CONSTRAINT "FK_ONE_TO_MANY"
        FOREIGN KEY ("SOURCE_ID")
            REFERENCES "O_M_SOURCE" ("ID");

), (o_m_source.sql, DROP TABLE IF EXISTS "O_M_SOURCE" CASCADE;

CREATE TABLE "O_M_SOURCE" (
    "ID" BIGSERIAL NOT NULL,
    PRIMARY KEY ("ID")
);

ALTER TABLE "O_M_TARGET"
    ADD CONSTRAINT "FK_ONE_TO_MANY"
        FOREIGN KEY ("SOURCE_ID")
            REFERENCES "O_M_SOURCE" ("ID");

), (o_m_target.sql, DROP TABLE IF EXISTS "O_M_TARGET" CASCADE;

CREATE TABLE "O_M_TARGET" (
    "ID" BIGSERIAL NOT NULL,
    "SOURCE_ID" BIGINT NOT NULL,
    PRIMARY KEY ("ID")
);

)]
"""

const val h2Result = """
[(all-tables.sql, DROP TABLE IF EXISTS `O_M_TARGET` CASCADE;
DROP TABLE IF EXISTS `O_M_SOURCE` CASCADE;

CREATE TABLE `O_M_TARGET` (
    `ID` BIGINT NOT NULL AUTO_INCREMENT,
    `SOURCE_ID` BIGINT NOT NULL,
    PRIMARY KEY (`ID`)
);

CREATE TABLE `O_M_SOURCE` (
    `ID` BIGINT NOT NULL AUTO_INCREMENT,
    PRIMARY KEY (`ID`)
);

ALTER TABLE `O_M_TARGET`
    ADD CONSTRAINT `FK_ONE_TO_MANY`
        FOREIGN KEY (`SOURCE_ID`)
            REFERENCES `O_M_SOURCE` (`ID`);

), (o_m_source.sql, DROP TABLE IF EXISTS `O_M_SOURCE` CASCADE;

CREATE TABLE `O_M_SOURCE` (
    `ID` BIGINT NOT NULL AUTO_INCREMENT,
    PRIMARY KEY (`ID`)
);

ALTER TABLE `O_M_TARGET`
    ADD CONSTRAINT `FK_ONE_TO_MANY`
        FOREIGN KEY (`SOURCE_ID`)
            REFERENCES `O_M_SOURCE` (`ID`);

), (o_m_target.sql, DROP TABLE IF EXISTS `O_M_TARGET` CASCADE;

CREATE TABLE `O_M_TARGET` (
    `ID` BIGINT NOT NULL AUTO_INCREMENT,
    `SOURCE_ID` BIGINT NOT NULL,
    PRIMARY KEY (`ID`)
);

)]
"""
