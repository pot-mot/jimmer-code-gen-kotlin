##引入宏定义
$!{global.vm}

$!{define.vm}

#set($members = $tableInfo.fullColumn)

#filter($members, $inputIgnoreMembers)

##保存文件（宏定义）
#save("/$!{entityPath}/$!{inputPath}", "$!{inputSuffix}.kt")

##包路径（宏定义）
#setPackageSuffix("$!{entityPath}.$!{inputPath}")

##使用全局变量实现默认包导入
$!{autoImport.vm}

import org.babyfish.jimmer.Input
import org.mapstruct.BeanMapping
import org.mapstruct.Mapper
import org.mapstruct.ReportingPolicy
import org.mapstruct.factory.Mappers
#if($autoImportMember)
import $!{tableInfo.savePackageName}.$!{entityPath}.$!{tableInfo.name}
#end

#comment($entityComment)
data class $!{tableInfo.name}$!{inputSuffix}(
#set($count = 0)
#foreach($column in $members)
    var $!{column.name}: $!{tool.getClsNameByFullName($column.type)}#if($count < $members.size()),
#end
#set($count = $count + 1)
#end
) : Input<$!{tableInfo.name}> {
    fun toEntity(): $!{tableInfo.name} =
        CONVERTER.to$!{tableInfo.name}(this)

    @Mapper
    internal interface Converter {
        @BeanMapping(unmappedTargetPolicy = ReportingPolicy.IGNORE)
        fun to$!{tableInfo.name}(input: $!{tableInfo.name}Input): $!{tableInfo.name}
    }

    companion object {
        @JvmStatic
        private val CONVERTER = Mappers.getMapper(Converter::class.java)
    }
}
